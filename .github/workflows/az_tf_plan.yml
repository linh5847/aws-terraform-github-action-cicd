### Reusable workflow to plan terraform deployment, create artifact and upload to workflow artifacts for consumption ###

#checkov:skip:CKV2_GHA_1:Comment
name: "Build_TF_Plan"
permissions: read-all
on:
  workflow_call:
    inputs:
      path:
        description: "Specifies the path of the root terraform module."
        required: true
        type: string
      gh_environment:
        description: "Specifies the GitHub deployment environment."
        required: false
        type: string
        default: null
      enable_TFSEC:
        description: "(Optional) Enables TFSEC IaC scans and code quality checks on Terraform configurations"
        required: false
        type: boolean
        default: false
    secrets:
      aws_access_key_id:
        description: "Specifies the AWS_ACCESS_KEY_ID."
        required: true
      aws_secret_access_key:
        description: "Specifies the AWS_SECRET_ACCESS_KEY."
        required: true
      aws_default_region:
        description: "Specifies the AWS_DEFAULT_REGION."
        required: true
      terraform_version:
        description: "Specifies the TERRAFORM_VERSION."
        required: true

jobs:
  build-plan:
    runs-on: ubuntu-latest
    #environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path }}
    env:
      ###AWS Provider details###
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
      AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}

    # strategy:
    #   matrix:
    #     environment: [dev, stage, prod]

    steps:
      # TFLint Checkout Repository
      - name : Check out Git Repository
        uses: actions/checkout@v3  
        
      # TFLint - Terraform Check
      - uses: actions/cache@v4
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v2
        name: Setup TFLint
        with:
          github_token: ${{ secrets.CI_GITHUB_TOKEN }}
          
      # Print TFLint version
      - name: Show version
        run: tflint --version
        
      # Install plugins
      - name: Init TFLint
        run: tflint --init
        
      # Run tflint command in each directory recursively # use --force if you want to continue with workflow although errors are there
      - name: Run TFLint
        run: tflint -f compact --recursive

      # TFSec Checkout Repository
      - name: Clone repo
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.0
        with:
          sarif_file: tfsec.sarif

      - name: Terraform security scan
        uses: triat/terraform-security-scan@v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     # Path to SARIF file relative to the root of the repository
      #     sarif_file: tfsec.sarif

      # checkov-checks checkout Repository
      - name : Check out Git Repository
        uses: actions/checkout@v2
      
      # Checkov - Prevent cloud misconfigurations and find vulnerabilities during build-time in infrastructure as code
      - name: Run Checkov
        run: |
          docker run -t -v ${{ github.workspace }}:/tf --workdir /tf bridgecrew/checkov --directory /tf --skip-check CKV2_GHA_1

      # Terraform checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the selected version of Terraform CLI 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2" #${{ secrets.terraform_version }}

      - name: Terraform Init
        id: init
        run: terraform init -get=true -input=false -reconfigure

      # Run a terraform fmt to check syntax
      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check -diff

      # Run a terraform validate
      - name: Terraform Validate
        id: validate
        # Run even if formatting fails
        if: success() || failure()
        run: terraform validate

      # Run a terraform plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -lock=true -refresh=true -var-file=${{ inputs.path }}.tfvars